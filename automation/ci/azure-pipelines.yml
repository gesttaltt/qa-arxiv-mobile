trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - '**/*.md'
      - '**/*.py'
      - '**/*.yml'
      - '**/*.yaml'

pool:
  vmImage: 'ubuntu-latest'

variables:
  pythonVersion: '3.12'

stages:
  - stage: Linting
    displayName: 'Code Quality & Linting'
    jobs:
      - job: LintingJob
        displayName: 'Linting and Code Quality'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              addToPath: true
            displayName: 'Set up Python $(pythonVersion)'

          - task: Checkout@1
            displayName: 'Checkout repository'

          - script: |
              python -m pip install --upgrade pip
              pip install -r automation/requirements.txt
            displayName: 'Install dependencies with linting tools'

          - script: |
              npm install -g markdownlint-cli2
            displayName: 'Install Node.js markdown linting tools'

          - script: |
              echo "Running Python code formatting check..."
              black --check --diff automation/
            displayName: 'Python Code Formatting (Black)'
            continueOnError: true

          - script: |
              echo "Running Python linting..."
              ruff check automation/ --output-format=junit --output-file=ruff-results.xml
            displayName: 'Python Linting (Ruff)'
            continueOnError: true

          - script: |
              echo "Running Python type checking..."
              mypy automation/ --junit-xml=mypy-results.xml || true
            displayName: 'Python Type Checking (MyPy)'
            continueOnError: true

          - script: |
              echo "Running YAML linting..."
              yamllint automation/ci/ -f parsable > yamllint-results.txt || true
            displayName: 'YAML Linting'
            continueOnError: true

          - script: |
              echo "Running Markdown linting..."
              markdownlint-cli2 "**/*.md" "!node_modules" || true
            displayName: 'Markdown Linting'
            continueOnError: true

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '*-results.xml'
              failTaskOnFailedTests: false
              testRunTitle: 'Linting Results'
            displayName: 'Publish Linting Results'
            condition: always()

  - stage: Testing
    displayName: 'QA Testing & Validation'
    dependsOn: Linting
    condition: always()
    jobs:
      - job: TestingJob
        displayName: 'Automated Testing'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              addToPath: true
            displayName: 'Set up Python $(pythonVersion)'

          - task: Checkout@1
            displayName: 'Checkout repository'

          - script: |
              python -m pip install --upgrade pip
              pip install -r automation/requirements.txt
            displayName: 'Install testing dependencies'

          - script: |
              echo "Validating test environment connectivity..."
              python -c "import requests; print('Network connectivity OK')"
            displayName: 'Environment Validation'

          - script: |
              echo "Running automated test suite..."
              pytest automation/tests/ --trx=test-results/results.trx --html=test-results/report.html --cov=automation --cov-report=xml
            displayName: 'Execute QA Test Suite'
            continueOnError: true

          - script: |
              echo "Validating traceability matrix..."
              python -c "
              import csv
              import os
              if os.path.exists('manual-tests/traceability-matrix.csv'):
                  with open('manual-tests/traceability-matrix.csv', 'r') as f:
                      reader = csv.DictReader(f)
                      rows = list(reader)
                      print(f'Traceability matrix validated: {len(rows)} entries found')
              else:
                  print('Warning: Traceability matrix not found')
              "
            displayName: 'Validate Traceability Documentation'

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: '**/results.trx'
              failTaskOnFailedTests: false
              testRunTitle: 'QA Automation â€“ Arxiv Papers Testing'
            displayName: 'Publish Test Results'
            condition: always()

          - task: PublishHtmlReport@1
            inputs:
              reportDir: 'test-results'
              tabName: 'QA Test Report'
            displayName: 'Publish HTML Test Report'
            condition: always()

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: 'coverage.xml'
            displayName: 'Publish Code Coverage'
            condition: always()
